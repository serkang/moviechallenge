// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieChallenge.Data;

namespace MovieChallenge.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190722005521_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.Episode", b =>
                {
                    b.Property<string>("imdbID");

                    b.Property<string>("Actors");

                    b.Property<string>("Awards");

                    b.Property<string>("Country");

                    b.Property<string>("Director");

                    b.Property<string>("EpisodeNo");

                    b.Property<string>("Genre");

                    b.Property<string>("Language");

                    b.Property<string>("Metascore");

                    b.Property<string>("Plot");

                    b.Property<string>("Poster");

                    b.Property<string>("Rated");

                    b.Property<string>("Released");

                    b.Property<string>("Runtime");

                    b.Property<string>("Season");

                    b.Property<string>("Title");

                    b.Property<string>("Writer");

                    b.Property<string>("Year");

                    b.Property<string>("imdbRating");

                    b.Property<string>("imdbVotes");

                    b.Property<string>("seriesID");

                    b.HasKey("imdbID");

                    b.ToTable("Episodes","dbo");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.EpisodeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Source");

                    b.Property<string>("Value");

                    b.Property<string>("imdbId");

                    b.HasKey("Id");

                    b.HasIndex("imdbId");

                    b.ToTable("EpisodeRatings","dbo");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.Movie", b =>
                {
                    b.Property<string>("imdbID");

                    b.Property<string>("Actors");

                    b.Property<string>("Awards");

                    b.Property<string>("BoxOffice");

                    b.Property<string>("Country");

                    b.Property<string>("Director");

                    b.Property<string>("Dvd");

                    b.Property<string>("Genre");

                    b.Property<string>("Language");

                    b.Property<string>("Metascore");

                    b.Property<string>("Plot");

                    b.Property<string>("Poster");

                    b.Property<string>("Production");

                    b.Property<string>("Rated");

                    b.Property<string>("Released");

                    b.Property<string>("Runtime");

                    b.Property<string>("Title");

                    b.Property<string>("Website");

                    b.Property<string>("Writer");

                    b.Property<string>("Year");

                    b.Property<string>("imdbRating");

                    b.Property<string>("imdbVotes");

                    b.HasKey("imdbID");

                    b.ToTable("Movies","dbo");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.MovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Source");

                    b.Property<string>("Value");

                    b.Property<string>("imdbId");

                    b.HasKey("Id");

                    b.HasIndex("imdbId");

                    b.ToTable("MovieRatings","dbo");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.Serie", b =>
                {
                    b.Property<string>("imdbID");

                    b.Property<string>("Actors");

                    b.Property<string>("Awards");

                    b.Property<string>("Country");

                    b.Property<string>("Director");

                    b.Property<string>("Genre");

                    b.Property<string>("Language");

                    b.Property<string>("Metascore");

                    b.Property<string>("Plot");

                    b.Property<string>("Poster");

                    b.Property<string>("Rated");

                    b.Property<string>("Released");

                    b.Property<string>("Runtime");

                    b.Property<string>("Title");

                    b.Property<string>("Writer");

                    b.Property<string>("Year");

                    b.Property<string>("imdbRating");

                    b.Property<string>("imdbVotes");

                    b.Property<string>("totalSeasons");

                    b.HasKey("imdbID");

                    b.ToTable("Series","dbo");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.SerieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Source");

                    b.Property<string>("Value");

                    b.Property<string>("imdbId");

                    b.HasKey("Id");

                    b.HasIndex("imdbId");

                    b.ToTable("SerieRatings","dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieChallenge.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.EpisodeRating", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.Episode", "Episode")
                        .WithMany("Ratings")
                        .HasForeignKey("imdbId");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.MovieRating", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("imdbId");
                });

            modelBuilder.Entity("MovieChallenge.Data.Domain.SerieRating", b =>
                {
                    b.HasOne("MovieChallenge.Data.Domain.Serie", "Serie")
                        .WithMany("Ratings")
                        .HasForeignKey("imdbId");
                });
#pragma warning restore 612, 618
        }
    }
}
